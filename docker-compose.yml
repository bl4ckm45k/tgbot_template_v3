services:
  bot:
    image: "bot"
    stop_signal: SIGINT
    build:
      context: .
    working_dir: "/usr/src/app/bot"
    volumes:
      - .:/usr/src/app/bot
    command: bash -c "alembic upgrade head && uvicorn app_web:app --host 0.0.0.0 --port 8000 --log-level debug --workers 1 --forwarded-allow-ips='*' --proxy-headers"
    restart: always
    env_file:
      - ".env"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    networks:
      - tg_bot
  #  http://pgconfigurator.cybertec.at/ For Postgres Configuration
  postgres:
   image: postgres:16-alpine
   ports:
     - "127.0.0.1:5439:5432" # Change if you like! 5439 is external to container
   restart: always
   volumes:
     - ./volumes:/var/lib/postgresql/data
   command: "postgres -c max_connections=150
            -c shared_buffers=512MB -c effective_cache_size=1536MB
            -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB
            -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200
            -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2
            -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
   deploy:
     resources:
       limits:
         cpus: '1'
         memory: 1536MB # Установить в соответствии с конфигурацией Postgres
   env_file:
     - '.env'
   healthcheck:
     test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
     interval: 10s
     timeout: 5s
     retries: 10
     start_period: 10s
   logging:
     driver: "json-file"
     options:
       max-size: "200k"
       max-file: "10"
   networks:
     - tg_bot
  redis:
   image: redis:6.2-alpine
   restart: always
   command: redis-server --port $REDIS_PORT --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
   env_file:
     - ".env"
   ports:
     - "127.0.0.1:6380:6379"
   volumes:
     - ./volumes/redis:/data
   networks:
     - tg_bot

  # api:
  #  image: "api"
  #  stop_signal: SIGINT
  #  build:
  #    context: ./infrastructure/api
  #    dockerfile: Dockerfile
  #  working_dir: "/usr/src/app/api"
  #  volumes:
  #    - .:/usr/src/app/api
  #  command: [ "uvicorn", "infrastructure.api.app:app", "--host", "0.0.0.0", "--port", "8000" ]
  #  restart: always
  #  env_file:
  #    - ".env"
  #  logging:
  #    driver: "json-file"
  #    options:
  #      max-size: "200k"
  #      max-file: "10"

  nginx:
   container_name: nginx-reverse-proxy
   stop_signal: SIGINT
   restart: always
   image: nginx:latest
   ports:
     - '80:80'
     - '443:443'
   environment:
     DOMAIN: ${DOMAIN
     CERT_FULLCHAIN_PATH: ${CERT_FULLCHAIN_PATH}
     CERT_KEY_PATH: ${CERT_KEY_PATH}
   volumes:
      - ./etc/nginx/templates:/etc/nginx/templates:ro
      - ./etc/nginx/conf:/etc/nginx/conf.d
      - ${CERT_KEY_PATH}:${CERT_KEY_PATH}
      - ${CERT_FULLCHAIN_PATH}:${CERT_FULLCHAIN_PATH}
      - ./var/log/nginx:/var/log/nginx
      - ./var/www/html:/var/www/html
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./volumes/templates/404.html:/usr/share/nginx/html/custom_404.html
      - ./volumes/templates/50x.html:/usr/share/nginx/html/custom_50x.html
   networks:
     - tg_bot

networks:
  tg_bot:
    driver: bridge
